/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.88
 * Generated at: 2024-05-01 03:48:00 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.product;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import data.dao.WishlistDao;
import data.dao.CartDao;
import java.util.List;
import java.text.NumberFormat;
import data.dto.ProductDto;
import data.dao.ProductDao;
import data.dao.MemberDao;

public final class detailpage_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(7);
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("data.dao.MemberDao");
    _jspx_imports_classes.add("data.dao.ProductDao");
    _jspx_imports_classes.add("data.dao.WishlistDao");
    _jspx_imports_classes.add("data.dao.CartDao");
    _jspx_imports_classes.add("data.dto.ProductDto");
    _jspx_imports_classes.add("java.text.NumberFormat");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<link\r\n");
      out.write("	href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css\"\r\n");
      out.write("	rel=\"stylesheet\">\r\n");
      out.write("<link\r\n");
      out.write("	href=\"https://fonts.googleapis.com/css2?family=Noto+Sans+KR:wght@100..900&display=swap\"\r\n");
      out.write("	rel=\"stylesheet\">\r\n");
      out.write("<link rel=\"stylesheet\"\r\n");
      out.write("	href=\"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css\">\r\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.7.0.js\"></script>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"./review/reviewCss.css\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");


//2024-04-19 추가 
session.setAttribute("directPurchase", true);

String pro_num = request.getParameter("pro_num");

String loginok = (String) session.getAttribute("loginok");

String mem_id = (String) session.getAttribute("myid");


//아이디에 해당하는 멤버 시퀀스
MemberDao mdao = new MemberDao();
String mem_num = mdao.getNum(mem_id);

//해당상품에대한 데이터
ProductDao pdao = new ProductDao();
ProductDto pdto = pdao.getProduct(pro_num);

NumberFormat nf = NumberFormat.getCurrencyInstance();

//위시리스트 표시
WishlistDao wdao = new WishlistDao();
boolean existwish = wdao.checkWishlist(mem_num, pro_num);

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<div id=\"detailpage\">\r\n");
      out.write("	<form action=\"index.jsp?main=order/orderForm.jsp\" id=\"form1\" method=\"post\">\r\n");
      out.write("		<div id=\"detailpagediv\">\r\n");
      out.write("\r\n");
      out.write("		<!-- cart 데이터에 넣을 mem_num, pro_num -->\r\n");
      out.write("		<input type=\"hidden\" name=\"mem_num\" value=\"");
      out.print(mem_num);
      out.write("\"> <input\r\n");
      out.write("			type=\"hidden\" name=\"pro_num\" value=\"");
      out.print(pro_num);
      out.write("\">\r\n");
      out.write("\r\n");
      out.write("		<!-- 상품이미지 -->\r\n");
      out.write("		<div class=\"imgdiv\">\r\n");
      out.write("			<div class=\"mainimgdiv\">\r\n");
      out.write("				<img class=\"imgmain\" alt=\"\" src=\"");
      out.print(pdto.getPro_main_img());
      out.write("\">\r\n");
      out.write("			</div>\r\n");
      out.write("	\r\n");
      out.write("			<div class=\"subimgdiv\">\r\n");
      out.write("				<img class=\"subimg\" alt=\"\" src=\"");
      out.print(pdto.getPro_sub_img1());
      out.write("\"> <img\r\n");
      out.write("					class=\"subimg\" alt=\"\" src=\"");
      out.print(pdto.getPro_sub_img2());
      out.write("\"> <img\r\n");
      out.write("					class=\"subimg\" alt=\"\" src=\"");
      out.print(pdto.getPro_sub_img3());
      out.write("\"> <img\r\n");
      out.write("					class=\"subimg\" alt=\"\" src=\"");
      out.print(pdto.getPro_sub_img4());
      out.write("\">\r\n");
      out.write("			</div>\r\n");
      out.write("		</div>\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		<!-- 상품정보 -->\r\n");
      out.write("		<div class=\"info_and_btn_div\">\r\n");
      out.write("			<div class=\"infodiv\">\r\n");
      out.write("				<h4>");
      out.print(pdto.getPro_name());
      out.write("</h4>\r\n");
      out.write("				<h4>");
      out.print(nf.format(pdto.getPro_price()));
      out.write("</h4>\r\n");
      out.write("				<h4>\r\n");
      out.write("					<label>price</label>\r\n");
      out.write("					");
      out.print(pdto.getPro_price());
      out.write("</h4>\r\n");
      out.write("				<h4>\r\n");
      out.write("					Quantity<input type=\"number\" min=\"1\" max=\"99\" value=\"1\" step=\"1\"\r\n");
      out.write("						name=\"cnt\" id=\"quantity\" onchange=\"updateTotalPrice()\">\r\n");
      out.write("				</h4>\r\n");
      out.write("	\r\n");
      out.write("				<!-- 사이즈 선택 옵션 -->\r\n");
      out.write("				");

				String sizeCheck = pdto.getPro_size();
				if (sizeCheck != null) {
				
      out.write("\r\n");
      out.write("				<h4>\r\n");
      out.write("					<label>Color</label> <select style=\"width: 300px;\" name=\"size\">\r\n");
      out.write("						<option value=\"option1\" selected=\"selected\" value=\"1\">-[필수]옵션을\r\n");
      out.write("							선택해 주세요-</option>\r\n");
      out.write("						");

						String getSize = pdto.getPro_size();
						String[] size = getSize.split(",");
						for (int i = 0; i < size.length; i++) {
						
      out.write("\r\n");
      out.write("						<option value=\"");
      out.print(size[i]);
      out.write('"');
      out.write('>');
      out.print(size[i]);
      out.write("</option>\r\n");
      out.write("						");

						}
						}
						
      out.write("\r\n");
      out.write("					</select>\r\n");
      out.write("				</h4>\r\n");
      out.write("	\r\n");
      out.write("				<!-- 색깔 선택 옵션 -->\r\n");
      out.write("				");

				String colorCheck = pdto.getPro_color();
				if (colorCheck != null) {
				
      out.write("\r\n");
      out.write("				<h4>\r\n");
      out.write("					<label>Size</label> <select style=\"width: 300px;\" name=\"color\">\r\n");
      out.write("						<option value=\"option2\" selected=\"selected\" value=\"1\">-[필수]옵션을\r\n");
      out.write("							선택해 주세요-</option>\r\n");
      out.write("						");

						String getColor = pdto.getPro_color();
						String[] color = getColor.split(",");
						for (int i = 0; i < color.length; i++) {
						
      out.write("\r\n");
      out.write("						<option value=\"");
      out.print(color[i]);
      out.write('"');
      out.write('>');
      out.print(color[i]);
      out.write("</option>\r\n");
      out.write("						");

						}
						}
						
      out.write("\r\n");
      out.write("					</select>\r\n");
      out.write("				</h4>\r\n");
      out.write("	\r\n");
      out.write("				<!-- 구분 선 -->\r\n");
      out.write("				<hr>\r\n");
      out.write("	\r\n");
      out.write("				<!-- total 비용 -->\r\n");
      out.write("				<h4 id=\"totalPrice\">\r\n");
      out.write("					총 상품금액\r\n");
      out.write("					");
      out.print(nf.format(pdto.getPro_price()));
      out.write("</h4>\r\n");
      out.write("	\r\n");
      out.write("				<script type=\"text/javascript\">\r\n");
      out.write("					function updateTotalPrice(){\r\n");
      out.write("						var quantity = parseInt(document.getElementById(\"quantity\").value);\r\n");
      out.write("						var unitPrice = ");
      out.print(pdto.getPro_price());
      out.write(";\r\n");
      out.write("						var totalPrice = quantity * unitPrice;\r\n");
      out.write("						document.getElementById(\"totalPrice\").innerHTML = \"총 상품금액(수량)\"+totalPrice;\r\n");
      out.write("						}\r\n");
      out.write("				</script>\r\n");
      out.write("			</div>\r\n");
      out.write("	\r\n");
      out.write("			<!-- 장바구니, 위시리스트, buy now 버튼 -->\r\n");
      out.write("	\r\n");
      out.write("			<div class=\"btndiv\">\r\n");
      out.write("			<div class=\"heartCartBuy\">\r\n");
      out.write("				<button name=\"heart\" class=\"heart\" id=\"heart\" type=\"button\">\r\n");
      out.write("					");

					if (existwish == true) {
					
      out.write("\r\n");
      out.write("					<i class=\"bi bi-suit-heart-fill\"\r\n");
      out.write("						style=\"font-size: 25px; color: #FF5C00;\"></i>\r\n");
      out.write("					");

					} else {
					
      out.write("\r\n");
      out.write("					<i class=\"bi bi-suit-heart\" style=\"font-size: 25px; color: #FF5C00;\"></i>\r\n");
      out.write("					");

					}
					
      out.write("\r\n");
      out.write("				</button>\r\n");
      out.write("	\r\n");
      out.write("				<button name=\"cart\" class=\"cart\" type=\"button\">\r\n");
      out.write("					<i class=\"bi bi-cart\" style=\"font-size: 25px;\"></i>\r\n");
      out.write("				</button>\r\n");
      out.write("	\r\n");
      out.write("				<!-- 구매버튼 판매, 단종, 재입고 옵션마다 다르게 -->\r\n");
      out.write("				");

				String pro_status = pdto.getPro_sale_status();
				if (pro_status.equals("판매중")) {
				
      out.write("\r\n");
      out.write("				<button type=\"submit\" name=\"buynow\" class=\"buynow\">BUY NOW</button>\r\n");
      out.write("				");

				} else if (pro_status.equals("품절")) {
				
      out.write("\r\n");
      out.write("				<button name=\"no_buynow\" class=\"no_buynow\" disabled>품절</button>\r\n");
      out.write("				");

				} else if (pro_status.equals("단종")) {
				
      out.write("\r\n");
      out.write("				<button name=\"soldout\" class=\"soldout\" disabled>판매가 중지된\r\n");
      out.write("					제품입니다</button>\r\n");
      out.write("				");

				}
				
      out.write("\r\n");
      out.write("				</div>\r\n");
      out.write("				<div>\r\n");
      out.write("				<button class=\"infobtn\" type=\"button\">DESCRIPTION</button>\r\n");
      out.write("				<div class=\"description\" style=\"display: none;\">");
      out.print(pdto.getPro_explain());
      out.write("</div>\r\n");
      out.write("				<br>\r\n");
      out.write("				<button class=\"infobtn\" type=\"button\">PRODUCT DETAIL</button>\r\n");
      out.write("				<div class=\"description\" style=\"display: none;\">");
      out.print(pdto.getPro_explain());
      out.write("</div>\r\n");
      out.write("				<br>\r\n");
      out.write("				<button class=\"infobtn\" type=\"button\">SHOPPING GUIDE</button>\r\n");
      out.write("				<div class=\"description\" style=\"display: none;\">");
      out.print(pdto.getPro_explain());
      out.write("</div>\r\n");
      out.write("				<br>\r\n");
      out.write("				</div>\r\n");
      out.write("			</div>\r\n");
      out.write("			</div>\r\n");
      out.write("		\r\n");
      out.write("	</form>\r\n");
      out.write("	</div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("	<hr>\r\n");
      out.write("	<div>\r\n");
      out.write("		");
 session.setAttribute("pro_num", pro_num); 
      out.write("\r\n");
      out.write("		");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../review/reviewList.jsp", out, false);
      out.write("\r\n");
      out.write("	</div>\r\n");
      out.write("	\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("	<!-- 장바구니 버튼 함수-->\r\n");
      out.write("	<script type=\"text/javascript\">\r\n");
      out.write("	$(document).ready(function() {\r\n");
      out.write("		\r\n");
      out.write("    $(\".cart\").click(function(){\r\n");
      out.write("    	var login=\"");
      out.print(loginok);
      out.write("\";\r\n");
      out.write("\r\n");
      out.write("			if (login == \"null\") {\r\n");
      out.write("				alert(\"먼저 로그인을 해주세요\");\r\n");
      out.write("				return;\r\n");
      out.write("			}\r\n");
      out.write("\r\n");
      out.write("			\r\n");
      out.write("			//장바구니에 같은 옵션있으면 '장바구니에 이미 담겨져 있습니다' alert 띄우기\r\n");
      out.write("			");
CartDao cdao = new CartDao();
			cdao.overlapProDel(pro_num);
      out.write("\r\n");
      out.write("			\r\n");
      out.write("				//옵션 선택 안하고 장바구니 넣을때\r\n");
      out.write("				var pro_color = $('select[name=\"color\"]').val();\r\n");
      out.write("				    \r\n");
      out.write("				var pro_size = $('select[name=\"size\"]').val();\r\n");
      out.write("				\r\n");
      out.write("				if(pro_size==\"option1\"||pro_color==\"option2\")\r\n");
      out.write("					{\r\n");
      out.write("					alert(\"옵션을 선택해주세요\");\r\n");
      out.write("					return;\r\n");
      out.write("					}\r\n");
      out.write("					\r\n");
      out.write("			//form태그 가져오기\r\n");
      out.write("			var cartdata = $(\"#form1\").serialize();\r\n");
      out.write("			//alert(cartdata);\r\n");
      out.write("\r\n");
      out.write("			//insert\r\n");
      out.write("			$.ajax({\r\n");
      out.write("				type : \"post\",\r\n");
      out.write("				dataType : \"html\",\r\n");
      out.write("				data : cartdata,\r\n");
      out.write("				url : \"index.jsp?main=product/detailprocess.jsp\",\r\n");
      out.write("				success : function() {\r\n");
      out.write("\r\n");
      out.write("					var a = confirm(\"장바구니에 저장하였습니다\\n장바구니로 이동하려면 [확인]을 눌러주세요\");\r\n");
      out.write("\r\n");
      out.write("					if (a) {\r\n");
      out.write("						location.href = \"index.jsp?main=cart/mycart.jsp\";\r\n");
      out.write("					}\r\n");
      out.write("				}\r\n");
      out.write("			});\r\n");
      out.write("		});\r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("		//BUY NOW 버튼 함수\r\n");
      out.write("	  $(\".buynow\").click(function(){\r\n");
      out.write("    	var login=\"");
      out.print(loginok);
      out.write("\";\r\n");
      out.write("\r\n");
      out.write("			if (login == \"null\") {\r\n");
      out.write("				alert(\"먼저 로그인을 해주세요\");\r\n");
      out.write("				return;\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("			//옵션 선택 안하고 장바구니 넣을때\r\n");
      out.write("			var pro_color = $('select[name=\"color\"]').val();\r\n");
      out.write("			    \r\n");
      out.write("			var pro_size = $('select[name=\"size\"]').val();\r\n");
      out.write("			\r\n");
      out.write("			if(pro_size==\"option1\"||pro_color==\"option2\")\r\n");
      out.write("				{\r\n");
      out.write("				alert(\"옵션을 선택해주세요\");\r\n");
      out.write("				return false;\r\n");
      out.write("				}\r\n");
      out.write("		return true;\r\n");
      out.write("	});\r\n");
      out.write("			\r\n");
      out.write("		//상품 상세설명 버튼 3개\r\n");
      out.write("	    $(\".infobtn\").click(function() {\r\n");
      out.write("	        // 버튼이 속한 부모 요소에서 다음에 오는 div를 찾아서 토글\r\n");
      out.write("	        $(this).next(\"div.description\").slideToggle();\r\n");
      out.write("	    });\r\n");
      out.write("		\r\n");
      out.write("\r\n");
      out.write("		//위시리스트 버튼 함수\r\n");
      out.write("	    $(\"#heart\").click(function() {\r\n");
      out.write("	        var login = \"");
      out.print(loginok);
      out.write("\";\r\n");
      out.write("\r\n");
      out.write("	        if (login == \"null\") {\r\n");
      out.write("	            alert(\"먼저 로그인을 해주세요\");\r\n");
      out.write("	            window.location.href = \"loginMain.jsp\";\r\n");
      out.write("	            return;\r\n");
      out.write("	        }\r\n");
      out.write("\r\n");
      out.write("	        var existwish = ");
      out.print(existwish);
      out.write(";\r\n");
      out.write("\r\n");
      out.write("	        var pro_num = ");
      out.print(pro_num);
      out.write(";\r\n");
      out.write("	        var mem_num = \"");
      out.print(mem_num);
      out.write("\";\r\n");
      out.write("\r\n");
      out.write("	        $.ajax({\r\n");
      out.write("	            type: \"post\",\r\n");
      out.write("	            dataType: \"json\",\r\n");
      out.write("	            data: { pro_num: pro_num, mem_num: mem_num },\r\n");
      out.write("	            url: \"product/wishProccess.jsp\",\r\n");
      out.write("	            success: function(res) {\r\n");
      out.write("	                console.log({ res });\r\n");
      out.write("\r\n");
      out.write("	                if (res.status) {\r\n");
      out.write("	                    $(\"#heart\").html('<i class=\"bi bi-suit-heart-fill\" style=\"font-size: 25px; color: #FF5C00;\"></i>');\r\n");
      out.write("	                } else {\r\n");
      out.write("	                    $(\"#heart\").html('<i class=\"bi bi-suit-heart\" style=\"font-size: 25px; color: #FF5C00;\"></i>');\r\n");
      out.write("	                }\r\n");
      out.write("	            },\r\n");
      out.write("	            error: function(xhr, status, error) {\r\n");
      out.write("	                console.error(\"AJAX 오류: \", error);\r\n");
      out.write("	                alert(\"AJAX 오류 발생. 콘솔을 확인하세요.\");\r\n");
      out.write("	            }\r\n");
      out.write("	        });\r\n");
      out.write("	    });\r\n");
      out.write("		\r\n");
      out.write("	});\r\n");
      out.write("	</script>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
