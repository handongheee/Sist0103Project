/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.88
 * Generated at: 2024-05-01 03:48:19 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.wishlist;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import data.dto.WishlistDto;
import java.util.HashMap;
import java.util.List;
import data.dao.WishlistDao;

public final class wishlist_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(6);
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("java.text.DecimalFormat");
    _jspx_imports_classes.add("data.dto.WishlistDto");
    _jspx_imports_classes.add("java.util.HashMap");
    _jspx_imports_classes.add("data.dao.WishlistDao");
    _jspx_imports_classes.add("java.text.NumberFormat");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\r\n");
      out.write("<link href=\"https://fonts.googleapis.com/css2?family=Noto+Sans+KR:wght@100..900&display=swap\" rel=\"stylesheet\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css\">\r\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.7.0.js\"></script>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"../header/header.css\"/>\r\n");
      out.write("\r\n");
      out.write("<title>위시리스트</title>\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("	body{\r\n");
      out.write("	 	font-family: 'Noto Sans KR';\r\n");
      out.write("	 	color: black;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	a, .goDetail{\r\n");
      out.write("		text-decoration: none !important;\r\n");
      out.write("		color:black;\r\n");
      out.write("		cursor: pointer;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	#del{\r\n");
      out.write("		text-decoration: underline;\r\n");
      out.write("		cursor: pointer;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	input{\r\n");
      out.write("		/*accent-color:#FF5C00;*/\r\n");
      out.write("		accent-color:black !important;\r\n");
      out.write("	}\r\n");
      out.write("		\r\n");
      out.write("	/* 페이징 디자인 */\r\n");
      out.write("	.page-link {\r\n");
      out.write("	  color: black; \r\n");
      out.write("	  background-color: white;\r\n");
      out.write("	  \r\n");
      out.write("	}\r\n");
      out.write("	.page-item.active .page-link {\r\n");
      out.write("		 z-index: 1;\r\n");
      out.write("		 color: white;\r\n");
      out.write("		 background-color: #FF5C00;\r\n");
      out.write("		 border-color: #FF5C00;\r\n");
      out.write("	}\r\n");
      out.write("	.page-link:focus, .page-link:hover {\r\n");
      out.write("		  background-color: #FF5C00; \r\n");
      out.write("		  color:white;\r\n");
      out.write("	}\r\n");
      out.write("</style>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("	$(function(){\r\n");
      out.write("		// 상품 클릭 시 상품상세로 이동\r\n");
      out.write("		$(\"a.goDetail\").click(function(){\r\n");
      out.write("			var pronum=$(this).attr(\"pronum\");\r\n");
      out.write("			//alert(pronum);\r\n");
      out.write("			\r\n");
      out.write("			// 디테일 페이지로 이동 #review\r\n");
      out.write("			location.href=\"index.jsp?main=product/detailpage.jsp?pro_num=\"+pronum;\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("		// 전체선택 클릭 시 모든 체크값 전달\r\n");
      out.write("		$(\".allCheck\").click(function(){\r\n");
      out.write("			var chk=$(this).is(\":checked\");\r\n");
      out.write("			console.log(chk);\r\n");
      out.write("			\r\n");
      out.write("			$(\".allDel\").prop(\"checked\", chk);	\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("		// 선택상품삭제 클릭 시 선택상품 삭제\r\n");
      out.write("		$(\"#del\").click(function(){\r\n");
      out.write("			var len=$(\".allDel:checked\").length;\r\n");
      out.write("			//alert(len);\r\n");
      out.write("			\r\n");
      out.write("			if(len==0){\r\n");
      out.write("				alert(\"상품을 선택해주세요.\");\r\n");
      out.write("			} else{\r\n");
      out.write("				var ask=confirm(\"선택하신 상품을 삭제하시겠습니까?\");\r\n");
      out.write("				\r\n");
      out.write("				if(ask){\r\n");
      out.write("					var ditem=\"\";\r\n");
      out.write("					$(\".allDel:checked\").each(function(idx){\r\n");
      out.write("						ditem+=$(this).val()+\",\";\r\n");
      out.write("					});\r\n");
      out.write("					\r\n");
      out.write("					ditem=ditem.substring(0,ditem.length-1);\r\n");
      out.write("					//console.log(ditem);\r\n");
      out.write("					//location.href=\"../wishlist/deleteWishlist.jsp?ditems=\"+ditem;\r\n");
      out.write("\r\n");
      out.write("					$.ajax({\r\n");
      out.write("						type:\"get\",\r\n");
      out.write("						url:\"./wishlist/deleteWishlist.jsp\",\r\n");
      out.write("						traditional: true,\r\n");
      out.write("						dataType:\"html\",\r\n");
      out.write("						data:{\"ditems\":ditem},\r\n");
      out.write("						success:function(){\r\n");
      out.write("							alert(\"관심상품이 삭제되었습니다.\");\r\n");
      out.write("							location.reload();\r\n");
      out.write("						}						\r\n");
      out.write("					});	\r\n");
      out.write("				}	\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("		});		\r\n");
      out.write("	});\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");

	//0415 로그인 세션
	//session.setAttribute("myid","dragon");
	//session.setAttribute("loginok","");	
	String loginok=(String)session.getAttribute("loginok");
	String mem_id=(String)session.getAttribute("myid");
	
	WishlistDao wdao=new WishlistDao();

	// 화폐 단위 정의
	NumberFormat nf=new DecimalFormat("#,###.##원");
	
	// * 페이징 ----------------------------------------------------------------------
	// 전체 개수
	int totalCount = wdao.getWishCount(mem_id);

	int perPage = 6; // 한페이지당 보여질 글의 개수
	int perBlock = 1; // 한블럭당 보여질 페이지 개수
	int startNum; // db에서 가져올 글의 시작 번호(mysql은 첫글이 0번, oracle은 1번)
	int startPage; // 각 블럭마다 보여질 시작페이지
	int endPage; // 각 블럭마다 보여질 끝페이지
	int currentPage; // 현재페이지
	int totalPage; // 총 페이지 수.
	int no; // 각 페이지당 출력할 시작번호 (필수 아님)

	// 현재 페이지를 읽는데 단, null일 경우는 1페이지로 준다.
	if (request.getParameter("currentPage") == null) {
		currentPage = 1;
	} else {
		currentPage = Integer.parseInt(request.getParameter("currentPage")); // 계산을 위해 형변환
	}

	// 총 페이지 수 구한다
	totalPage = totalCount / perPage + (totalCount % perPage == 0 ? 0 : 1);

	// 각 블럭 당 보여질 시작페이지
	startPage = (currentPage - 1) / perBlock * perBlock + 1;
	endPage = startPage + perBlock - 1;

	// 총 페이지가 23일 경우 마지막 블럭은 25가 아닌 23
	if (endPage > totalPage) {
		endPage = totalPage;
	}

	// 각 페이지에서 보여질 시작번호
	startNum = (currentPage - 1) * perPage;

	// 각 페이지당 출력할 시작 번호 구하기
	no = totalCount - (currentPage - 1) * perPage;

	// 페이지에서 보여질 글만 가져오기
	List<HashMap<String, String>> list=wdao.getPagingWishlist(mem_id, startNum, perPage);
	// --------------------------------------------------------------------------

      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");

	// 로그인이 되어있을 때 위시리스트 접근 가능
	if(loginok!=null && totalCount>0){
      out.write("\r\n");
      out.write("\r\n");
      out.write("		<div style=\"margin:0 auto; width:800px\">\r\n");
      out.write("			<h3 style=\"padding: 75px; font-size: 24px;\" align=\"center\">WISH LIST</h3>\r\n");
      out.write("			<table align=\"center\" class=\"table\">\r\n");
      out.write("			<div style=\"padding: 8px;\">\r\n");
      out.write("				<label><input type=\"checkbox\" class=\"form-check allCheck\" style=\"margin-right:5px; float: left;\"> 전체선택</label>\r\n");
      out.write("			</div>\r\n");
      out.write("				\r\n");
      out.write("				");

				for(int i=0; i<list.size(); i++){
					HashMap<String, String> map=list.get(i);
					int pro_price=Integer.parseInt(map.get("pro_price")); // 가격이 String으로 넘어왔으므로 형변환
							
					
      out.write("\r\n");
      out.write("						<tr style=\"vertical-align: middle;\">\r\n");
      out.write("								\r\n");
      out.write("							<div>\r\n");
      out.write("								<td width=\"10px\" align=\"center\" >\r\n");
      out.write("									<input type=\"checkbox\" class=\"form-check allDel\" value=\"");
      out.print(map.get("wish_num"));
      out.write("\">\r\n");
      out.write("								</td>\r\n");
      out.write("													\r\n");
      out.write("								<td width=\"150px\" style=\"text-align: center;\">			\r\n");
      out.write("									<a pronum=\"");
      out.print(map.get("pro_num"));
      out.write("\" class=\"goDetail\">\r\n");
      out.write("										<img alt=\"\" src=\"");
      out.print(map.get("pro_main_img"));
      out.write("\" style=\"width:125px\"> \r\n");
      out.write("									</a>								\r\n");
      out.write("								</td>\r\n");
      out.write("										\r\n");
      out.write("								<td>\r\n");
      out.write("									<a pronum=\"");
      out.print(map.get("pro_num"));
      out.write("\" class=\"goDetail\" style=\"color: black;\">\r\n");
      out.write("										<div>\r\n");
      out.write("											<b>");
      out.print(map.get("pro_name") );
      out.write("</b> <br>\r\n");
      out.write("											");
      out.print(nf.format(pro_price) );
      out.write("\r\n");
      out.write("										</div>\r\n");
      out.write("									</a>\r\n");
      out.write("								</td>\r\n");
      out.write("							</div>					\r\n");
      out.write("						</tr>					\r\n");
      out.write("					");
}	
				
      out.write("\r\n");
      out.write("		\r\n");
      out.write("			</table>\r\n");
      out.write("			<div id=\"del\">\r\n");
      out.write("				선택상품삭제\r\n");
      out.write("			</div>\r\n");
      out.write("			\r\n");
      out.write("			<!-- 페이지 번호 출력 -->\r\n");
      out.write("			<ul class=\"pagination justify-content-center\" style=\"margin-top: 90px;\">\r\n");
      out.write("			");

				// 이전
				if (startPage > 1) {
				
      out.write("\r\n");
      out.write("				<li class=\"page-item\"><a class=\"page-link\"\r\n");
      out.write("					href=\"index.jsp?main=wishlist/wishlist.jsp?&currentPage=");
      out.print(startPage - 1);
      out.write("\"style=\"color: black;\" aria-label=\"Previous\"><span aria-hidden=\"true\">&#10094;</span></a></li>\r\n");
      out.write("				");

				}
	
				// 다음
				if (endPage < totalPage) {
				
      out.write("\r\n");
      out.write("					<li class=\"page-item\"><a class=\"page-link\"\r\n");
      out.write("						href=\"index.jsp?main=wishlist/wishlist.jsp?currentPage=");
      out.print(endPage + 1);
      out.write("\"style=\"color: black\" aria-label=\"Next\"><span aria-hidden=\"true\">&#10095;</span></a>\r\n");
      out.write("					</li>\r\n");
      out.write("				");

				}
			
      out.write("\r\n");
      out.write("		</ul>\r\n");
      out.write("		<!-- 페이지 번호 출력 끝. -->\r\n");
      out.write("\r\n");
      out.write("		</div>\r\n");
      out.write("		\r\n");
      out.write("		");


	} else if(loginok==null) {
		response.sendRedirect("../index.jsp?main=SemiLogin/Login.jsp");
	} else {
      out.write("\r\n");
      out.write("		<div style=\"margin:0 auto; width:600px\">\r\n");
      out.write("			<h3 style=\"padding: 75px; font-size: 24px;\" align=\"center\">WISH LIST</h3>\r\n");
      out.write("			<div style=\"padding: 90px; font-size: 16px;\" align=\"center\">\r\n");
      out.write("				<span style=\"font-size: 14px; color: #616161;\">관심상품이 없습니다.</span> <br>\r\n");
      out.write("				<div style=\"margin-top: 20px;\"><a href=\"index.jsp\" style=\"color: white; background: #FF5C00; padding: 4px 35px; border-radius: 5px;\">쇼핑하러가기</a></div>\r\n");
      out.write("			</div>\r\n");
      out.write("		</div>\r\n");
      out.write("	");
}


      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
