/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.88
 * Generated at: 2024-05-01 03:47:20 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.review;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.HashMap;
import java.util.List;
import data.dao.ReviewDao;

public final class reviewList_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(3);
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("data.dao.ReviewDao");
    _jspx_imports_classes.add("java.util.HashMap");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<link\r\n");
      out.write("	href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css\"\r\n");
      out.write("	rel=\"stylesheet\">\r\n");
      out.write("<link\r\n");
      out.write("	href=\"https://fonts.googleapis.com/css2?family=Noto+Sans+KR:wght@100..900&display=swap\"\r\n");
      out.write("	rel=\"stylesheet\">\r\n");
      out.write("<link rel=\"stylesheet\"\r\n");
      out.write("	href=\"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css\">\r\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.7.0.js\"></script>\r\n");
      out.write("\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write(" <link rel=\"stylesheet\" href=\"./review/reviewCss.css\">\r\n");
      out.write("</head>\r\n");

//리뷰 리스트 db에서 가져오기

String pro_num=(String)session .getAttribute("pro_num");


ReviewDao rdao = new ReviewDao();

//페이지 번호 버튼
System.out.println(pro_num);
int totalCount = rdao.getTotalCount(pro_num); //리스트 숫자
System.out.println(totalCount);
int perPage = 5; //한 페이지의 리스트 숫자
int perBlock = 5; //버튼 한줄의 숫자

int totalPage = totalCount / perPage + (totalCount % perPage == 0 ? 0 : 1); //총 페이지 나누기 perpage에 나머지가 있을때 btn 1+ (totalPage)
int currentPage;

//currentPage에 값 미리 할당해놓기
if (request.getParameter("currentPage") == null)
	currentPage = 1;
else
	currentPage = Integer.parseInt(request.getParameter("currentPage"));

int startPage = (currentPage - 1) / perBlock * perBlock + 1; // 버튼 한줄의 시작 숫자

int startList = (currentPage - 1) * perPage;

List<HashMap<String, String>> list = rdao.getReview(pro_num, startList, perPage); //버튼 한줄의 시작숫자부터 5개의 리스트 목록

int endPage = startPage + perBlock -1 ; //버튼 한줄의 마지막 숫자

if(endPage>totalPage)
	endPage=totalPage; //총페이지가 23일경우 마지막블럭은 끝페이지가 25가 아니라 23

      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<!-- 리뷰 리스트 목차 ------------------------------------------>\r\n");
      out.write("<div id=\"reviewList\">\r\n");
      out.write("	<h4>REVIEW</h4>\r\n");
      out.write("	<div id=\"list\">\r\n");
      out.write("		<table id=\"listTable\">\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th>NO</th>\r\n");
      out.write("				<th>RATING</th>\r\n");
      out.write("				<th>SUBJECT</th>\r\n");
      out.write("				<th>NAME</th>\r\n");
      out.write("				<th>DATE</th>\r\n");
      out.write("			</tr>\r\n");
      out.write("\r\n");
      out.write("			<!--리뷰 리스트 출력 ------------------------------------------->\r\n");
      out.write("			");

			int count = (currentPage - 1) * perPage + 1; // count 변수 초기화
			for (int i = 0; i < list.size(); i++) {
				HashMap<String, String> map = list.get(i);
			
      out.write("\r\n");
      out.write("			<tr class=\"has-details\">\r\n");
      out.write("				<td>");
      out.print(count++);
      out.write("</td>\r\n");
      out.write("				<td>\r\n");
      out.write("					");

					String review_Pyung_str = map.get("review_pyung");
					int review_Pyung = 0;
					try {
						review_Pyung = Integer.parseInt(review_Pyung_str);
					} catch (NumberFormatException e) {
						// 변환에 실패한 경우 기본값인 0으로 설정
					}

					int starCount = review_Pyung;

					// 별 출력
					for (int j = 0; j < starCount; j++) {
						 
      out.write("<span class=\"star\">★</span>");

					}
					
      out.write("\r\n");
      out.write("				</td>\r\n");
      out.write("				<td>");
      out.print(map.get("review_subject"));
      out.write("</td>\r\n");
      out.write("				<td>");
      out.print(map.get("mem_id"));
      out.write("</td>\r\n");
      out.write("				<td>");
      out.print(map.get("review_writeday"));
      out.write("</td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr class=\"hidden\">\r\n");
      out.write("				<td colspan=\"5\">");
      out.print(map.get("review_content"));
      out.write(' ');
      out.print(map.get("review_image"));
      out.write("</td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			\r\n");
      out.write("\r\n");
      out.write("			");

			}
			
      out.write("\r\n");
      out.write("		</table>\r\n");
      out.write("\r\n");
      out.write("	</div>\r\n");
      out.write("\r\n");
      out.write("		<div class=\"reviewBtnDiv\">\r\n");
      out.write("			<button onclick=\"location.href='index.jsp?main=review/reviewForm.jsp?pro_num=");
      out.print(pro_num );
      out.write("'\" class=\"reviewBtn\">WRITE</button>\r\n");
      out.write("			<button onclick=\"location.href='reviewPage.jsp'\" class=\"reviewBtn\">LIST</button>\r\n");
      out.write("		</div>\r\n");
      out.write("\r\n");
      out.write("	<!-- 페이지 번호 출력 ---------------------------------------------------------------->\r\n");
      out.write("		<div class=\"pageNumList\">\r\n");
      out.write("			<ul class=\"pagination justify-content-center\">\r\n");
      out.write("				");

				// 이전 페이지로 이동 링크
				if (startPage > 1) {
				
      out.write("\r\n");
      out.write("				<li class=\"\"><a class=\"pageNum\"\r\n");
      out.write("					href=\"index.jsp?main=review/reviewList.jsp?currentPage=");
      out.print(startPage - 1);
      out.write("\"\r\n");
      out.write("					style=\"color: black;\"> <i class=\"bi bi-arrow-left\"></i>\r\n");
      out.write("				</a></li>\r\n");
      out.write("				");

				}

				// 페이지 번호 출력
				for (int pp = startPage; pp <= endPage; pp++) {
				
      out.write("\r\n");
      out.write("				<li class=\"\">\r\n");
      out.write("				<a\r\n");
      out.write("					class=\"");
      out.print((pp == currentPage) ? "active" : "");
      out.write(" pageNum\"\r\n");
      out.write("					href=\"index.jsp?main=review/reviewList.jsp?currentPage=");
      out.print(pp);
      out.write('"');
      out.write('>');
      out.write(' ');
      out.print(pp);
      out.write("\r\n");
      out.write("				</a></li>\r\n");
      out.write("				");

				}

				// 다음 페이지로 이동 링크
				if (endPage < totalPage) {
				
      out.write("\r\n");
      out.write("				<li class=\"\"><a class=\"pageNum\"\r\n");
      out.write("					href=\"index.jsp?main=review/reviewList.jsp?currentPage=");
      out.print(endPage+1);
      out.write("\"\r\n");
      out.write("					style=\"color: black;\"> <i class=\"bi bi-arrow-right\"></i>\r\n");
      out.write("				</a></li>\r\n");
      out.write("				");

				}
				
      out.write("\r\n");
      out.write("			</ul>\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("	document.addEventListener(\"DOMContentLoaded\", function() {\r\n");
      out.write("		  // 상위 tr 요소를 클릭할 때마다 하위 tr 요소를 숨기거나 보이게 함\r\n");
      out.write("		  var parentTrs = document.querySelectorAll('tr.has-details');\r\n");
      out.write("		  parentTrs.forEach(function(parentTr) {\r\n");
      out.write("		    parentTr.addEventListener('click', function() {\r\n");
      out.write("		      var detailsTr = this.nextElementSibling;\r\n");
      out.write("		      detailsTr.classList.toggle('hidden');\r\n");
      out.write("		    });\r\n");
      out.write("		  });\r\n");
      out.write("		});\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
