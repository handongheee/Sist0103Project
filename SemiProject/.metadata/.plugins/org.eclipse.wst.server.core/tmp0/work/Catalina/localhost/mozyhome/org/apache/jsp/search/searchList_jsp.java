/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.88
 * Generated at: 2024-05-01 03:48:15 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.search;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.ArrayList;
import data.dao.ProductListDao;
import data.dto.CategoryDto;
import java.text.DecimalFormat;
import data.dto.WishlistDto;
import java.text.NumberFormat;
import data.dto.ProductDto;
import java.util.List;
import data.dao.ProductDao;

public final class searchList_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(9);
    _jspx_imports_classes.add("data.dao.ProductListDao");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("data.dao.ProductDao");
    _jspx_imports_classes.add("data.dto.CategoryDto");
    _jspx_imports_classes.add("java.text.DecimalFormat");
    _jspx_imports_classes.add("data.dto.WishlistDto");
    _jspx_imports_classes.add("data.dto.ProductDto");
    _jspx_imports_classes.add("java.text.NumberFormat");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\r\n");
      out.write("<link href=\"https://fonts.googleapis.com/css2?family=Noto+Sans+KR:wght@100..900&display=swap\" rel=\"stylesheet\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css\">\r\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.7.0.js\"></script>\r\n");
      out.write("\r\n");
      out.write("<title>검색리스트</title>\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("	body{\r\n");
      out.write("	 	text-decoration: none !important;\r\n");
      out.write("		color:black !important;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	a, .goDetail{\r\n");
      out.write("		text-decoration: none !important;\r\n");
      out.write("		color:black !important;\r\n");
      out.write("		cursor: pointer;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	.sort{\r\n");
      out.write("		font-size: 14px !important;\r\n");
      out.write("		color:#aaa !important;\r\n");
      out.write("		border-color: white !important;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	/* 페이징 디자인 */\r\n");
      out.write("	body > div.layout.main > div > ul > li > a{\r\n");
      out.write("		color: black !important;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	.page-link {\r\n");
      out.write("	  color: black !important;\r\n");
      out.write("	  background-color: white;\r\n");
      out.write("	  \r\n");
      out.write("	}\r\n");
      out.write("	.page-item.active .page-link {\r\n");
      out.write("		 z-index: 1 !important;\r\n");
      out.write("		 color: white !important;\r\n");
      out.write("		 background-color: #FF5C00;\r\n");
      out.write("		 border-color: #FF5C00;\r\n");
      out.write("	}\r\n");
      out.write("	.page-link:focus, .page-link:hover {\r\n");
      out.write("		  background-color: #eee; \r\n");
      out.write("		  color:black;\r\n");
      out.write("	}\r\n");
      out.write("</style>\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("	$(function(){\r\n");
      out.write("		\r\n");
      out.write("		// 상품 클릭 시 상품상세로 이동\r\n");
      out.write("		$(\"a.goDetail\").click(function(){\r\n");
      out.write("			var pronum=$(this).attr(\"pronum\");\r\n");
      out.write("			//alert(pronum);\r\n");
      out.write("			\r\n");
      out.write("			// 디테일 페이지로 이동 #review\r\n");
      out.write("			location.href=\"index.jsp?main=product/detailpage.jsp?pro_num=\"+pronum;\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("		// 정렬 콤보박스 클릭 시\r\n");
      out.write("		$(\"select[name=sort]\").change(function(){\r\n");
      out.write("			var sort=$(this).val();\r\n");
      out.write("			//alert(sort);\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("	});\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");

	request.setCharacterEncoding("utf-8");
	//0415 로그인 세션
	//session.setAttribute("mem_id","dragon");
	//session.setAttribute("loginok","yes");	
	String loginok=(String)session.getAttribute("loginok");
	String myid=(String)session.getAttribute("myid");
	//System.out.println(myid);
	
	// 검색한 단어 받아오기
	String search=request.getParameter("search");

	// 0413 정렬 번호 받아오기
	String sort=request.getParameter("sort");
	//System.out.println("sort값:"+sort);
	
	// 상품리스트 dao 불러오기
	ProductListDao pldao=new ProductListDao();
	
	// 화폐 단위 정의
	NumberFormat nf=new DecimalFormat("#,###.##원");

	List<ProductDto> list = new ArrayList<ProductDto>();
	
	// * 페이징 ----------------------------------------------------------------------
	// 전체 개수
	int totalCount=pldao.getSearchTotalCount(search);	
	
	int perPage=16; // 한페이지당 보여질 글의 개수
	int perBlock=5; // 한블럭당 보여질 페이지 개수
	int startNum; // db에서 가져올 글의 시작 번호(mysql은 첫글이 0번, oracle은 1번)
	int startPage; // 각 블럭마다 보여질 시작페이지
	int endPage; // 각 블럭마다 보여질 끝페이지
	int currentPage; // 현재페이지
	int totalPage; // 총 페이지 수.
	int no; // 각 페이지당 출력할 시작번호 (필수 아님)
		
	// 현재 페이지를 읽는데 단, null일 경우는 1페이지로 준다.
	if(request.getParameter("currentPage")==null){
		currentPage=1;
	} else{
		currentPage=Integer.parseInt(request.getParameter("currentPage")); // 계산을 위해 형변환
	}		
		
	// 총 페이지 수 구한다
	totalPage=totalCount/perPage+(totalCount%perPage==0?0:1);
		
	// 각 블럭 당 보여질 시작페이지
	startPage=(currentPage-1)/perBlock*perBlock+1;
	endPage=startPage+perBlock-1;
		
	// 총 페이지가 23일 경우 마지막 블럭은 25가 아닌 23
	if(endPage>totalPage){
		endPage=totalPage;
	}
		
	// 각 페이지에서 보여질 시작번호
	startNum=(currentPage-1)*perPage;
		
	// 각 페이지당 출력할 시작 번호 구하기
	no=totalCount-(currentPage-1)*perPage;
	
	// 페이지에서 보여질 글만 가져오기
	if ("1".equals(sort)) {
		list = pldao.NEWgetSearchPagingList(search, startNum, perPage);

	} else if ("2".equals(sort)) {
		list = pldao.NAMEgetSearchPagingList(search, startNum, perPage);

	} else if ("3".equals(sort)) {
		//System.out.println("실행확인3");
		list = pldao.RPRICEgetSearchPagingList(search, startNum, perPage);

	} else if ("4".equals(sort)) {
		list = pldao.HPRICEgetSearchPagingList(search, startNum, perPage);

	} else if ("5".equals(sort)) {
		list = pldao.REVIEWgetSearchPagingList(search, startNum, perPage);

	} else {
		//System.out.println("실행확인 default");
		list = pldao.getSearchPagingList(search, startNum, perPage);
	}
	// --------------------------------------------------------------------------

      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("<div style=\"margin:0 auto; width:1400px\">\r\n");
      out.write("	<table>\r\n");
      out.write("		<div style=\"margin:100px 0px 10px 15px; float:left;\">\r\n");
      out.write("		총 <b>");
      out.print(totalCount );
      out.write("</b>개의 상품\r\n");
      out.write("			\r\n");
      out.write("			<div style=\"margin: -28px 0px 0px 1290px;\">			\r\n");
      out.write("				<select name=\"sort\" class=\"form-select form-select sort\" style=\"width:100px;\" onchange=\"window.open(value,'_self');\">\r\n");
      out.write("					<option value=\"index.jsp?main=search/searchList.jsp?search=");
      out.print(search);
      out.write("&sort=1\" ");
      out.print("1".equals(sort)?"selected='selected'":"");
      out.write(">신상품</option>\r\n");
      out.write("					<option value=\"index.jsp?main=search/searchList.jsp?search=");
      out.print(search);
      out.write("&sort=2\" ");
      out.print("2".equals(sort)?"selected='selected'":"");
      out.write(">상품명</option>\r\n");
      out.write("					<option value=\"index.jsp?main=search/searchList.jsp?search=");
      out.print(search);
      out.write("&sort=3\" ");
      out.print("3".equals(sort)?"selected='selected'":"");
      out.write(">낮은가격</option>\r\n");
      out.write("					<option value=\"index.jsp?main=search/searchList.jsp?search=");
      out.print(search);
      out.write("&sort=4\" ");
      out.print("4".equals(sort)?"selected='selected'":"");
      out.write(">높은가격</option>\r\n");
      out.write("					<option value=\"index.jsp?main=search/searchList.jsp?search=");
      out.print(search);
      out.write("&sort=5\" ");
      out.print("5".equals(sort)?"selected='selected'":"");
      out.write(">리뷰순</option>\r\n");
      out.write("				</select>\r\n");
      out.write("				\r\n");
      out.write("			</div>	\r\n");
      out.write("		</div> \r\n");
      out.write("		\r\n");
      out.write("		<!-- 상품 출력 -->\r\n");
      out.write("		<tr class=\"list\">\r\n");
      out.write("		");

				int line=0;
				
				for(ProductDto pdto:list){
      out.write("\r\n");
      out.write("					<td style=\"padding: 0px 10px 60px;\">\r\n");
      out.write("						<a pronum=\"");
      out.print(pdto.getPro_num());
      out.write("\" class=\"goDetail\">\r\n");
      out.write("							<img src=\"");
      out.print(pdto.getPro_main_img());
      out.write("\" style=\"width:340px; padding-bottom: 8px;\"> <br>\r\n");
      out.write("							<span style=\"padding-bottom:50px; font-weight: bold;\">");
      out.print(pdto.getPro_name() );
      out.write("</span> <br>\r\n");
      out.write("							");

								// 품절 표시
								if(pdto.getPro_sale_status().equals("품절")){
      out.write("\r\n");
      out.write("									<span class=\"proPrice\" style=\"color: #aaa; text-decoration: line-through;\">");
      out.print(nf.format(pdto.getPro_price()) );
      out.write("</span><span style=\"background: black; color: white; font-size:13px; margin-left: 8px; text-align: center;\">&nbsp;&nbsp;SOLD OUT&nbsp;&nbsp;</span></div> <br>\r\n");
      out.write("								");
} else{
      out.write("\r\n");
      out.write("									<span class=\"proPrice\">");
      out.print(nf.format(pdto.getPro_price()) );
      out.write("</span> <br>\r\n");
      out.write("								");
}
							
							
      out.write("							\r\n");
      out.write("\r\n");
      out.write("							<div style=\"color:#aaa; padding-top: 3px;\">\r\n");
      out.write("							");

								// 위시리스트 하트 아이콘 출력 - 해당 아이디로 위시리스트 등록되어있으면 하트아이콘 채우기
								// 0415 'pdto.getMem_id()!=null' 추후 삭제 예정
								if(loginok!=null && pdto.getMem_id()!=null && pdto.getMem_id().equals(myid)){
      out.write("	\r\n");
      out.write("									<i class=\"bi bi-suit-heart-fill\" style=\"color: #FF5C00;\"></i> ");
      out.print(pdto.getWishCount() );
      out.write("\r\n");
      out.write("								");
} else{
      out.write("\r\n");
      out.write("									<i class=\"bi bi-suit-heart\"></i> ");
      out.print(pdto.getWishCount() );
      out.write("\r\n");
      out.write("								");
}
							
      out.write("\r\n");
      out.write("								<i class=\"bi bi-chat-left\" style=\"margin-left:15px;\"></i> ");
      out.print(pdto.getReviewCount());
      out.write("\r\n");
      out.write("							</div>	\r\n");
      out.write("						</a>\r\n");
      out.write("					</td>\r\n");
      out.write("				\r\n");
      out.write("				");

					// 한 줄에 출력되는 상품 개수 설정
					if((line+1)%4==0){
      out.write("\r\n");
      out.write("						</tr><tr>\r\n");
      out.write("					");
}
					line++;
				
      out.write("\r\n");
      out.write("\r\n");
      out.write("			");
}	
				
		
      out.write("\r\n");
      out.write("		</tr>\r\n");
      out.write("	</table>\r\n");
      out.write("	\r\n");
      out.write("	<!-- 페이지 번호 출력 -->\r\n");
      out.write("	<ul class=\"pagination justify-content-center\" style=\"margin-top: 90px;\">\r\n");
      out.write("		");

			if(sort!=null){
				// 이전
				if(startPage>1){
      out.write("\r\n");
      out.write("					<li class=\"page-item\">\r\n");
      out.write("						<a class=\"page-link\" href=\"index.jsp?main=search/searchList.jsp?search=");
      out.print(search );
      out.write("&currentPage=");
      out.print(startPage-1);
      out.write("&sort=");
      out.print(sort );
      out.write("\" style=\"color:black;\" aria-label=\"Previous\"><span aria-hidden=\"true\">&laquo;</span></a>\r\n");
      out.write("					</li>\r\n");
      out.write("				");
}
			
				for(int pp=startPage; pp<=endPage; pp++){
					if(pp==currentPage){
      out.write("\r\n");
      out.write("						<li class=\"page-item active\">\r\n");
      out.write("							<a class=\"page-link\" href=\"index.jsp?main=search/searchList.jsp?search=");
      out.print(search );
      out.write("&currentPage=");
      out.print(pp);
      out.write("&sort=");
      out.print(sort );
      out.write('"');
      out.write('>');
      out.print(pp );
      out.write("</a>\r\n");
      out.write("						</li>\r\n");
      out.write("					");
} else{
      out.write("\r\n");
      out.write("						<li class=\"page-item\">\r\n");
      out.write("							<a class=\"page-link\" href=\"index.jsp?main=search/searchList.jsp?search=");
      out.print(search );
      out.write("&currentPage=");
      out.print(pp);
      out.write("&sort=");
      out.print(sort );
      out.write('"');
      out.write('>');
      out.print(pp );
      out.write("</a>\r\n");
      out.write("						</li>\r\n");
      out.write("					");
}
				}
				
				// 다음
				if(endPage<totalPage){
      out.write("\r\n");
      out.write("					<li class=\"page-item\">\r\n");
      out.write("						<a class=\"page-link\" href=\"index.jsp?main=search/searchList.jsp?search=");
      out.print(search );
      out.write("&currentPage=");
      out.print(endPage+1);
      out.write("&sort=");
      out.print(sort );
      out.write("\" style=\"color:black\" aria-label=\"Next\"><span aria-hidden=\"true\">&raquo;</span></a>\r\n");
      out.write("					</li>			\r\n");
      out.write("				");
}
			} else {
				// 이전
				if(startPage>1){
      out.write("\r\n");
      out.write("					<li class=\"page-item\">\r\n");
      out.write("						<a class=\"page-link\" href=\"index.jsp?main=search/searchList.jsp?search=");
      out.print(search );
      out.write("&currentPage=");
      out.print(startPage-1);
      out.write("\" style=\"color:black;\" aria-label=\"Previous\"><span aria-hidden=\"true\">&#10094;</span></a>\r\n");
      out.write("					</li>\r\n");
      out.write("				");
}
			
				for(int pp=startPage; pp<=endPage; pp++){
					if(pp==currentPage){
      out.write("\r\n");
      out.write("						<li class=\"page-item active\">\r\n");
      out.write("							<a class=\"page-link\" href=\"index.jsp?main=search/searchList.jsp?search=");
      out.print(search );
      out.write("currentPage=");
      out.print(pp);
      out.write('"');
      out.write('>');
      out.print(pp );
      out.write("</a>\r\n");
      out.write("						</li>\r\n");
      out.write("					");
} else{
      out.write("\r\n");
      out.write("						<li class=\"page-item\">\r\n");
      out.write("							<a class=\"page-link\" href=\"index.jsp?main=search/searchList.jsp?search=");
      out.print(search );
      out.write("&currentPage=");
      out.print(pp);
      out.write('"');
      out.write('>');
      out.print(pp );
      out.write("</a>\r\n");
      out.write("						</li>\r\n");
      out.write("					");
}
				}
				
				// 다음
				if(endPage<totalPage){
      out.write("	\r\n");
      out.write("					<li class=\"page-item\">\r\n");
      out.write("						<a class=\"page-link\" href=\"index.jsp?main=search/searchList.jsp?search=");
      out.print(search );
      out.write("&currentPage=");
      out.print(endPage+1);
      out.write("\" style=\"color:black\" aria-label=\"Next\"><span aria-hidden=\"true\">&#10095;</span></a>\r\n");
      out.write("					</li>			\r\n");
      out.write("				");
}
			}
			
		
      out.write("\r\n");
      out.write("	</ul>\r\n");
      out.write("	<!-- 페이지 번호 출력 끝. -->\r\n");
      out.write("	\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
