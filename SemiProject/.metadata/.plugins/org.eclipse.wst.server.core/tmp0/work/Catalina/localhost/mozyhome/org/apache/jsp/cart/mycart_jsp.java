/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.88
 * Generated at: 2024-05-01 03:51:52 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.cart;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import data.dao.ProductDao;
import java.util.HashMap;
import java.util.List;
import data.dao.CartDao;
import java.text.NumberFormat;

public final class mycart_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(5);
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("data.dao.ProductDao");
    _jspx_imports_classes.add("java.util.HashMap");
    _jspx_imports_classes.add("data.dao.CartDao");
    _jspx_imports_classes.add("java.text.NumberFormat");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<link\r\n");
      out.write("	href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css\"\r\n");
      out.write("	rel=\"stylesheet\">\r\n");
      out.write("<link\r\n");
      out.write("	href=\"https://fonts.googleapis.com/css2?family=Dongle&family=Gaegu&family=Nanum+Pen+Script&family=Noto+Sans+KR:wght@100..900&family=Noto+Serif+KR&display=swap\"\r\n");
      out.write("	rel=\"stylesheet\">\r\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.7.0.js\"></script>\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"./review/reviewCss.css\">\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");

//2024-04-19 추가 
session.setAttribute("directPurchase", false);

String id=(String)session.getAttribute("myid");
System.out.println(id);

CartDao cdao = new CartDao();
List<HashMap<String, String>> list = cdao.getCartList(id);
int listSize=list.size();

System.out.println(list);

NumberFormat nf = NumberFormat.getInstance();

      out.write("\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<div id=\"mycart\">\r\n");
      out.write("	<!-- 장바구니 header -->\r\n");
      out.write("	<div class=\"cart_div\">\r\n");
      out.write("		<div class=\"cart_title\">\r\n");
      out.write("			<h5 class=\"cart_title_cart\">CART</h5>\r\n");
      out.write("			<div class=\"cart_su\">");
      out.print(listSize);
      out.write("</div>\r\n");
      out.write("		</div>\r\n");
      out.write("			<hr class=\"titleHr\" >\r\n");
      out.write("	</div>\r\n");
      out.write("	<!-- 장바구니 list -->\r\n");
      out.write("	<form action=\"index.jsp?main=order/orderForm.jsp\" class=\"cart_process\" method=\"post\">\r\n");
      out.write("		<div class=\"cartListDiv\">\r\n");
      out.write("		<div class=\"cartAllChkDiv\">\r\n");
      out.write("			<input class=\"cart_select_all\" id=\"cart_select_all\" type=\"checkbox\">\r\n");
      out.write("			<p>전체선택</p>\r\n");
      out.write("		</div>	\r\n");
      out.write("			<hr style=\"height: 0px; border: 1px solid #000000;\">\r\n");
      out.write("			");

			int totalmoney = 0;
			for (int i = 0; i < list.size(); i++) {
				HashMap<String, String> map = list.get(i);
				//사진얻기
				String pro_main_img = map.get("pro_main_img");
				int cart_su = Integer.parseInt(map.get("cart_su"));
				int pro_price = Integer.parseInt(map.get("pro_price"));
				int total_price = cart_su * pro_price;
				String pro_num = map.get("pro_num");
			
      out.write("\r\n");
      out.write("			<div class=\"cartListDiv2\">\r\n");
      out.write("\r\n");
      out.write("				<input type=\"checkbox\" class=\"cart_select\"\r\n");
      out.write("					name=");
      out.print(map.get("cart_num"));
      out.write(" cart_num=\"");
      out.print(map.get("cart_num"));
      out.write("\">\r\n");
      out.write("\r\n");
      out.write("					<img class=\"cart_img\" alt=\"\" src=\"");
      out.print(pro_main_img);
      out.write("\">\r\n");
      out.write("\r\n");
      out.write("				<div class=\"pro_num proInfo\" pro_num=\"");
      out.print(map.get("pro_num"));
      out.write("\">\r\n");
      out.write("					<b class=\"pro_name_b\">");
      out.print(map.get("pro_name"));
      out.write("</b>\r\n");
      out.write("					\r\n");
      out.write("					<div>\r\n");
      out.write("					<b class=\"option_b\">[옵션:");
      out.print(map.get("cart_size"));
      out.write("]</b> \r\n");
      out.write("					<b class=\"option_b\">[옵션:");
      out.print(map.get("cart_color"));
      out.write("]</b>\r\n");
      out.write("					</div>\r\n");
      out.write("					\r\n");
      out.write("					<div class=\"cart_number\">\r\n");
      out.write("					");

					ProductDao pdao = new ProductDao();
					int real_pro_price = pdao.getProPrice(pro_num);
					
      out.write("\r\n");
      out.write("					<b>수량:</b>\r\n");
      out.write("					<input type=\"number\" min=\"1\"\r\n");
      out.write("						max=\"99\" value=\"");
      out.print(map.get("cart_su"));
      out.write("\" step=\"1\" name=\"cnt\"\r\n");
      out.write("						id=\"quantity");
      out.print(i);
      out.write("\" onchange=\"updateTotalPrice(");
      out.print(i);
      out.write(")\" class=\"cartCnt\">\r\n");
      out.write("					</div>\r\n");
      out.write("				</div>\r\n");
      out.write("\r\n");
      out.write("				<input type=\"hidden\" id=\"realProPrice");
      out.print(i);
      out.write("\"\r\n");
      out.write("					value=\"");
      out.print(real_pro_price);
      out.write("\"> \r\n");
      out.write("				\r\n");
      out.write("				");

				String pro_priceStr = map.get("pro_price");

				pro_price = Integer.parseInt(pro_priceStr);
				
      out.write("\r\n");
      out.write("\r\n");
      out.write("				<b class=\"pro_price2\" id=\"totalPrice");
      out.print(i);
      out.write("\" value=\"");
      out.print(total_price);
      out.write('"');
      out.write('>');
      out.write('₩');
      out.print(nf.format(total_price));
      out.write("</b>\r\n");
      out.write("				\r\n");
      out.write("				</div>\r\n");
      out.write("		\r\n");
      out.write("				<hr class=\"cartListHr\">\r\n");
      out.write("			");

			}
			int total=0;
			for (int i = 0; i < list.size(); i++) {
				HashMap<String, String> map = list.get(i);
				int cart_su = Integer.parseInt(map.get("cart_su"));
				int pro_price = Integer.parseInt(map.get("pro_price"));
				int total_price = cart_su * pro_price;
				total+=total_price;
			}
			
			int sale=total/20;
			int finalprice=total-sale;
			
			
      out.write("\r\n");
      out.write("			\r\n");
      out.write("			\r\n");
      out.write("			<div>\r\n");
      out.write("				<div class=\"priceDiv\" >\r\n");
      out.write("					<span class=\"priceSpan\"> 상품금액</span>\r\n");
      out.write("					<p ><b>");
      out.print(nf.format(total));
      out.write("원</b></p>\r\n");
      out.write("				</div>\r\n");
      out.write("					<hr>\r\n");
      out.write("				<div class=\"priceDiv\">	\r\n");
      out.write("					<span class=\"priceSpan\">할인금액</span>\r\n");
      out.write("					<p><b>");
      out.print(nf.format(sale));
      out.write("원</b></p>\r\n");
      out.write("				</div>\r\n");
      out.write("					<hr>\r\n");
      out.write("				<div class=\"priceDiv\">	 \r\n");
      out.write("					<span class=\"priceSpan\">배송비</span>\r\n");
      out.write("					<p><b>0원</b></p>\r\n");
      out.write("				</div>\r\n");
      out.write("					<hr class=\"boldHr\">\r\n");
      out.write("				<div class=\"priceDiv\">	 \r\n");
      out.write("					<span class=\"priceSpan\">Total</span>\r\n");
      out.write("					<p class=\"finalPrice\"><b>");
      out.print(nf.format(finalprice));
      out.write("원</b></p>\r\n");
      out.write("				</div>	\r\n");
      out.write("			</div>\r\n");
      out.write("			\r\n");
      out.write("		</div>\r\n");
      out.write("		<!-- 장바구니 button -->\r\n");
      out.write("\r\n");
      out.write("		<div class=\"cartBtnDiv\">\r\n");
      out.write("			<button type=\"button\" class=\"buy_btn cartbtn\" \r\n");
      out.write("				>선택상품 구매</button>\r\n");
      out.write("			<button  class=\"all_buy_btn cartbtn\"\r\n");
      out.write("				type=\"button\">전체상품 구매</button>\r\n");
      out.write("			<div class=\"cartDelBtn\">\r\n");
      out.write("				<button  class=\"del_btn cartbtn\" type=\"button\">선택삭제</button>\r\n");
      out.write("				<button class=\"all_del_btn cartbtn\" type=\"button\">전체삭제</button>\r\n");
      out.write("			</div>\r\n");
      out.write("\r\n");
      out.write("		</div>\r\n");
      out.write("	</form>\r\n");
      out.write("\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("	<script type=\"text/javascript\">\r\n");
      out.write("//수량 맞춰서 가격 변경\r\n");
      out.write("    function updateTotalPrice(index) {\r\n");
      out.write("        var quantity = parseInt(document.getElementById(\"quantity\" + index).value);\r\n");
      out.write("        var real_pro_price = parseInt(document.getElementById(\"realProPrice\" + index).value);\r\n");
      out.write("        \r\n");
      out.write("        console.log(\"Real Unit Price:\", real_pro_price);\r\n");
      out.write("        \r\n");
      out.write("        var totalPrice = quantity * real_pro_price;\r\n");
      out.write("        document.getElementById(\"totalPrice\" + index).innerHTML = \"₩\" + totalPrice.toLocaleString();\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("//도큐먼트 준비하고 스크립트 적용 함수    \r\n");
      out.write("$(document).ready(function(){\r\n");
      out.write("	\r\n");
      out.write("    //전체 선택 체크박스\r\n");
      out.write("    $(\".cart_select_all\").click(function(){\r\n");
      out.write("          var chk=$(this).is(\":checked\");\r\n");
      out.write("          $(\".cart_select\").prop(\"checked\",chk);\r\n");
      out.write("      });\r\n");
      out.write("\r\n");
      out.write("    //상품 클릭시 디테일 페이지로 이동\r\n");
      out.write("     $(\"div.pro_num\").click(function(){\r\n");
      out.write("      var pro_num=$(this).attr(\"pro_num\");\r\n");
      out.write("      location.href=\"index.jsp?main=product/detailpage.jsp?pro_num=\"+pro_num;\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("	//선택상품 구매 버튼\r\n");
      out.write("     $(\".buy_btn\").click(function() {\r\n");
      out.write("    	    var formData = []; // 선택된 상품들의 정보를 담을 배열\r\n");
      out.write("    	    \r\n");
      out.write("    	    var cnt=$(\".cart_select\").length;\r\n");
      out.write("       	 \r\n");
      out.write("    	    // 선택된 상품들의 정보 수집\r\n");
      out.write("    	    $(\".cart_select:checked\").each(function() {\r\n");
      out.write("    	        var cart_num = $(this).attr(\"cart_num\");\r\n");
      out.write("    	        var cart_su = parseInt($(this).closest(\"div\").find(\".quantity\").val());\r\n");
      out.write("    	        \r\n");
      out.write("    	        // Form 데이터로 묶어 배열에 추가\r\n");
      out.write("    	        formData.push({\r\n");
      out.write("    	            \"cart_num\": cart_num,\r\n");
      out.write("    	            \"cart_su\": cart_su\r\n");
      out.write("    	        });\r\n");
      out.write("    	    });\r\n");
      out.write("    	    \r\n");
      out.write("    	    // Form 데이터를 서버로 전송\r\n");
      out.write("    	    $.ajax({\r\n");
      out.write("    	        type: \"POST\",\r\n");
      out.write("    	        url: \"index.jsp?main=order/orderForm.jsp\", // 데이터 처리를 위한 JSP 파일\r\n");
      out.write("    	        data: formData, // JSON 데이터가 아닌 Form 데이터를 전송\r\n");
      out.write("    	        success: function(response) {\r\n");
      out.write("    	            alert(\"주문이 완료되었습니다.\");\r\n");
      out.write("    	            // 여기에 추가적인 동작을 구현할 수 있습니다.\r\n");
      out.write("    	        },\r\n");
      out.write("    	        error: function(xhr, status, error) {\r\n");
      out.write("    	            alert(\"주문 요청에 실패했습니다. 다시 시도해주세요.\");\r\n");
      out.write("    	            console.error(error);\r\n");
      out.write("    	        }\r\n");
      out.write("    	    });\r\n");
      out.write("    	});\r\n");
      out.write("   \r\n");
      out.write("    //전체상품 구매 버튼\r\n");
      out.write("     $(\".all_buy_btn\").click(function(){\r\n");
      out.write("    	 var cnt=$(\".cart_select\").length;\r\n");
      out.write("    	 \r\n");
      out.write("    	  if(cnt==0){\r\n");
      out.write("              alert(\"장바구니에 상품이 없습니다.\");\r\n");
      out.write("              return;\r\n");
      out.write("          };\r\n");
      out.write("          \r\n");
      out.write("          $(\".cart_select\").each(function(i, elt){\r\n");
      out.write("      	    var cart_num = $(this).attr(\"cart_num\");\r\n");
      out.write("			var cart_su = parseInt(document.getElementById('quantity' + i).value);	\r\n");
      out.write("			cart_num_su.push({\r\n");
      out.write("			        \"cart_num\": cart_num,\r\n");
      out.write("			        \"cart_su\": cart_su\r\n");
      out.write("			    });\r\n");
      out.write("      	});\r\n");
      out.write("      	    buy(cart_num_su);\r\n");
      out.write("    });\r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("    //선택삭제 버튼\r\n");
      out.write("    $(\".del_btn\").click(function(){\r\n");
      out.write("      var cnt=$(\".cart_select:checked\").length;\r\n");
      out.write("      \r\n");
      out.write("      if(cnt==0){\r\n");
      out.write("          alert(\"먼저 삭제할 상품을 1개 이상 선택해 주세요\");\r\n");
      out.write("          return ;\r\n");
      out.write("      };\r\n");
      out.write("      \r\n");
      out.write("      $(\".cart_select:checked\").each(function(i, elt){\r\n");
      out.write("    	    var cart_num = $(this).attr(\"cart_num\");\r\n");
      out.write("    	    del(cart_num);\r\n");
      out.write("    	});\r\n");
      out.write("      \r\n");
      out.write("    });\r\n");
      out.write("        \r\n");
      out.write("    //전체삭제 버튼\r\n");
      out.write("     $(\".all_del_btn\").click(function(){\r\n");
      out.write("    	    if(confirm(\"모든 상품을 삭제하시겠습니까?\")){\r\n");
      out.write("    	        $(\".cart_select\").each(function(i, elt){\r\n");
      out.write("    	            var cart_num = $(this).attr(\"cart_num\");\r\n");
      out.write("    	            del(cart_num);\r\n");
      out.write("    	        });\r\n");
      out.write("    	    }\r\n");
      out.write("    	});\r\n");
      out.write("     \r\n");
      out.write("    //del 함수\r\n");
      out.write("	function del(cart_num)\r\n");
      out.write("	{\r\n");
      out.write("	 $.ajax({\r\n");
      out.write("		  \r\n");
      out.write("			  type:\"get\",\r\n");
      out.write("			  url:\"cart/cartdelete.jsp\",\r\n");
      out.write("			  dataType:\"html\",\r\n");
      out.write("			  data:{\"cart_num\":cart_num},\r\n");
      out.write("			  success:function(){\r\n");
      out.write("				  \r\n");
      out.write("        	    	location.reload();\r\n");
      out.write("        	    	\r\n");
      out.write("	          }\r\n");
      out.write("		  });\r\n");
      out.write("	 }\r\n");
      out.write("    \r\n");
      out.write("\r\n");
      out.write("	//buy함수\r\n");
      out.write("	function buy(cart_num_su)\r\n");
      out.write("	{\r\n");
      out.write("	$.ajax({\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("			  type:\"get\",\r\n");
      out.write("			  url:\"../order/orderFrom.jsp\",\r\n");
      out.write("			  dataType:\"json\",\r\n");
      out.write("			  data:cart_num_su,\r\n");
      out.write("			  success:function(){\r\n");
      out.write("				  \r\n");
      out.write("				  window.location.href = \"../order/orderFrom.jsp\";\r\n");
      out.write("	    	    	\r\n");
      out.write("	          }\r\n");
      out.write("		  });\r\n");
      out.write("	 }\r\n");
      out.write("\r\n");
      out.write("});\r\n");
      out.write("        \r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
